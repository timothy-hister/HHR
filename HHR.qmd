---
title: "Health Human Resources Supply and Demand Forecasting"
subtitle: "BC Cancer"
date: today
author: Tim Hister
format: 
  revealjs:
    incremental: true
    auto-animate: true
execute:
  echo: true
  output-location: fragment
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: true

pacman::p_load(tidyverse, hsiaR, reactable, tidymodels)
set.seed(10)

params = list(
  start_year = "FY2020/21",
  num_years_to_forecast = 10L,
  num_years_of_data = 4L,
  num_physicians = 1000L,
  entrants_ratio = .1
)
```

# Introduction

## Motivation

![](images/clipboard-2192972124.png){.fragment}

## Project Plan

-   Forecast supply and demand of physicians in B.C.
-   $gap_t = demand_t - supply_t$
-   Physician Headcount and "full time equivalent" (FTE; measure for physician productivity)
-   Multiple models; keep two best.
-   "Best" == ???

## `hsiaR`

-   R package I wrote for hsiaR division at MOH
-   Features: MOH database, fiscal years, BC Health Authorities, and much, much more!

::: fragment
```{r}
hsiaR::hiQuery
```
:::

# Data

## Data Overall

-   ![Ministry of Health datasets](https://www2.gov.bc.ca/gov/content/health/conducting-health-research-evaluation/data-access-health-data-central/health-sector-partner-access-to-data/third-party-access), such as ![MSP](https://healthdataplatformbc.ca/hdpbc-data).
-   Not publicly available
-   SQL code/random numbers

## Specialties

-   Doctors registered with MSP

::: fragment
```{r}
#| eval: false
hiQuery("select distinct mrspec Specialty_Code, spec_desc Specialty 
        from msea_team_lvl2.vt4 order by 1")
```
:::

# Supply

## Headcount

-   $headcount_t = headcount_{t-1} + entrants_t - retirees_{t-1}$
-   $entrants_t$: average of the three most recent years of available data.
-   Retirements: logistic regression
-   $\begin{aligned}[t]
retirement\_prob = \beta_0 &+ \beta_1 \cdot rurality \\
                           &+ \beta_2 \cdot age + \beta_3 \cdot age^2 \\
                           &+ \beta_4 \cdot gender \\
                           &+ \beta_5 \cdot model\_specific\_vars
\end{aligned}$

## Specialties

```{r}
specialties = tibble(
  spec_id = 0:3,
  spec = c("FAMILY MEDICINE", "DERMATOLOGY", "NEUROLOGY", "PSYCHIATRY")
)

specialties
```


## (Fake) Data Set

```{r}
phys_df = tibble(
  phys_id = 1:params$num_physicians,
  spec_id = sample(specialties$spec_id, params$num_physicians, replace = T), 
  age = as.integer(rnorm(params$num_physicians, 45, 12)) |> pmax(20L),
  rurality = runif(params$num_physicians),
  gender = sample(c("M","F"), params$num_physicians, T) # assume two genders for simplicity
) |>
  crossing(i = 1:params$num_years_of_data) |>
  mutate(age = age + i-1) |>
  mutate(fiscal = Vectorize(hsiaR::fiscal_add)(params$start_year, i-1)) |>
  select(-i) |>
  mutate(entered = F) |>
  mutate(retired = rurality + age + age^2 + if_else(gender == "M", 10, 0) + rnorm(1, 2000, 100)) |> # linear combination of regressors plus 'normal' noise
  mutate(retired = retired > quantile(retired, .9)) # 90% don't retire
  
  
# remove all years after retirement
phys_df = phys_df |>
  anti_join(
    phys_df |>
      filter(retired) |>
      arrange(phys_id, fiscal) |>
      group_by(phys_id) |>
      slice_head(n=1),
    by=join_by(phys_id==phys_id, fiscal > fiscal)
)

# clean up columns and arrange
phys_df = phys_df |>
  mutate(gender = as_factor(gender)) |>
#  mutate(retired = as_factor(retired)) |>
  mutate(fiscal_id = Vectorize(hsiaR::fiscal_diff)(params$start_year, fiscal)) |>
  select(phys_id, spec_id, fiscal_id, age, gender, rurality, entered, retired) |>
  arrange(phys_id, fiscal_id)

head(phys_df)
```


## Data

```{r}
#| eval: false

gridExtra::grid.arrange(
  select(phys_df, phys_id, spec_id, age) |> 
    pivot_longer(cols = c(spec_id, age)) |>
    ggplot(aes(x=value, fill=name)) +
    facet_wrap(~name, scales='free') +
    geom_histogram() +
    ggthemes::theme_clean() +
    scale_fill_manual(values = viridis::viridis(4)[1:2]) + 
    guides(fill = 'none') + 
    labs(x=NULL, y=NULL),
  
  select(phys_df, phys_id, gender, retired) |> 
    mutate(across(2:3, as.factor)) |>
    pivot_longer(cols = c(gender, retired)) |>
    ggplot(aes(x=value, fill=name)) +
    facet_wrap(~name, scales='free') +
    geom_bar() +
    ggthemes::theme_clean() + 
    scale_fill_manual(values = viridis::viridis(4)[3:4]) + 
    guides(fill = 'none') +
    labs(x=NULL, y=NULL)
)
```

## Data

```{r}
#| echo: false

gridExtra::grid.arrange(
  select(phys_df, phys_id, spec_id, age) |> 
    pivot_longer(cols = c(spec_id, age)) |>
    ggplot(aes(x=value, fill=name)) +
    facet_wrap(~name, scales='free') +
    geom_histogram() +
    ggthemes::theme_clean() +
    scale_fill_manual(values = viridis::viridis(4)[1:2]) + 
    guides(fill = 'none') + 
    labs(x=NULL, y=NULL),
  
  select(phys_df, phys_id, gender, retired) |> 
    mutate(across(2:3, as.factor)) |>
    pivot_longer(cols = c(gender, retired)) |>
    ggplot(aes(x=value, fill=name)) +
    facet_wrap(~name, scales='free') +
    geom_bar() +
    ggthemes::theme_clean() + 
    scale_fill_manual(values = viridis::viridis(4)[3:4]) + 
    guides(fill = 'none') +
    labs(x=NULL, y=NULL)
)
```

```{r}
models = tibble(
  model_id = 1:2,
  equation = c(
    "retired ~ rurality + age + I(age^2) + gender", 
    "retired ~ rurality + age + I(age^2) + gender + fiscal_id")
)
```





## Logistic

```{r}
calc_logit = function(df, spec, equation) {
  df = df |> 
    filter(spec_id == spec) |>
    mutate(retired = as_factor(retired))
  logistic_reg(mode = 'classification', engine = 'glm') |>
    fit(as.formula(equation), data=df)
} 

logits = specialties |>
  crossing(models) |>
  select(spec_id, model_id, equation) |> 
  rowwise(spec_id, model_id, equation) |>
  mutate(data = list(calc_logit(phys_df, spec_id, equation))
  )

logits = filter(logits, model_id == 1)

logits$data[[1]]
```

```{r}
entrants = tibble(
  spec_id = sample(specialties$spec_id, params$num_entrants, replace = T),
  age = as.integer(rnorm(params$num_entrants, 35, 12)) |> pmax(20L), # a bit younger than the previous pool
  rurality = runif(params$num_entrants),
  gender = as_factor(sample(c("M","F"), params$num_entrants, T))
) |>
  nest_by(spec_id)

entrants$data[[1]]
```

```{r}
actuals = phys_df |> nest_by(spec_id)
```

```{r}
calc_retirements = function(df, logit) {
  preds = predict(logit, df, type='prob')
  preds$u = runif(nrow(preds), 0, 1)
  df$retired = preds$.pred_TRUE > preds$u
  df$entered = F
  return(df)
}  

add_entrants = function(df, entrant, h) {
  bind_rows(df, 
    entrant |> 
      mutate(phys_id = row_number() + (h * 1000)) |>
      mutate(entered = T) |>
      select(phys_id, age, gender, rurality, entered) |>
      mutate(retired = F)
  )
}

forecasts = actuals
forecasts$data = map(forecasts$spec_id, function(spec) {
  logit = filter(logits, spec_id == spec) |> pull(data) |> first()
  df_init = actuals |>
      filter(spec_id == spec) |>
      pull(data) |>
      first() |> 
      filter(fiscal_id == (params$num_years_of_data - 1))
  entrant = entrants |> filter(spec_id == spec) |> pull(data) |> first()
  
  accumulate(1:params$num_years_to_forecast, function(df, h) {
    df = df |> filter(!retired)
    df = calc_retirements(df, logit)
    df$age = df$age + 1
    df = add_entrants(df, entrant, h)
    df$fiscal_id = params$num_years_of_data + h - 1
    return(df)
  }, .init = df_init) |>
    bind_rows() |>
    filter(fiscal_id >= params$num_years_of_data) |>
    arrange(phys_id, fiscal_id)
})
```


```{r}
all_data = bind_rows(
  actuals |> unnest(data) |> mutate(is_forecast = F),
  forecasts |> unnest(data) |> mutate(is_forecast = T)
) |>
  arrange(spec_id, phys_id, fiscal_id) |>
  mutate(fiscal = Vectorize(hsiaR::fiscal_add)(params$start_year, fiscal_id))
```

```{r}
all_data |>
  group_by(spec_id, fiscal_id, fiscal, is_forecast) |>
  summarise(
    n = n(),
    retired = sum(retired),
    entered = sum(entered)
  ) |>
  pivot_longer(cols=c(n, retired, entered)) |>
  mutate(name = fct(name)) |>
  mutate(fiscal = fct(fiscal)) |>
  ggplot(aes(x=fiscal, y=value, color=name, group=interaction(spec_id, name))) +
  facet_wrap(~spec_id, scales='free') +
  geom_line(data = ~filter(., !is_forecast)) +
  geom_line(data = ~filter(., is_forecast), linetype = "dashed") +
  geom_point() +
  ggthemes::theme_clean() +
  scale_color_viridis_d(option = "C") +
  theme(legend.position = 'bottom') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(color=NULL)
```

