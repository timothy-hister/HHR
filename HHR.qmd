---
title: "Health Human Resources Supply and Demand Forecasting"
subtitle: "BC Cancer"
date: today
author: Tim Hister
format: 
  revealjs:
    incremental: true
    auto-animate: true
    theme: moon
    css: 
      - "style.css"
execute:
  echo: true
editor_options: 
  chunk_output_type: console
---

# Introduction

## Motivation

![](images/clipboard-2192972124.png)

## Motivation

-   Forecast the gap between supply and demand for physicians in B.C.

-   $gap_t = demand_t - supply_t$

-   $supply_t = headcount_t \times FTE_t$

-   Model Goals:

    1.  Predict all variables (supply, demand, FTE, gap, etc.)
    2.  Maintainable over time ("elegant" code, parameterization, etc.)

## Headcount

-   $headcount_t = headcount_{t-1} + entrants_{t-1} - retirees_{t-1}$

-   $entrants$: average of the three most recent years of available data.

-   $retirees$: logistic regression

-   $\begin{aligned}[t]
      retirement\_prob = \sigma (\beta_0 &+ \beta_1 \cdot rurality \\
                             &+ \beta_2 \cdot age + \beta_3 \cdot age^2 \\
                             &+ \beta_4 \cdot gender \\
                             &+ \beta_5 \cdot model\_specific\_vars)
      \end{aligned}$

-   Seven models (today two)

## Data

-   [Ministry of Health datasets](https://www2.gov.bc.ca/gov/content/health/conducting-health-research-evaluation/data-access-health-data-central/health-sector-partner-access-to-data/third-party-access), such as [MSP](https://healthdataplatformbc.ca/hdpbc-data).

![](images/clipboard-3863693993.png){height="300" .fragment}

<br>

-   Not public! (For today: fake data set)

# The Model

## Set Up

## Set Up & Parameters

```{r}
#| code-line-numbers: "5-6|10-15"
pacman::p_load(tidyverse, reactable, tidymodels)
set.seed(10)

specialties = tibble(
  spec_id = 0:3,
  spec = c("FAMILY MEDICINE", "DERMATOLOGY", "NEUROLOGY", "PSYCHIATRY")
)
 
params = list(
  start_year = "FY2020/21",
  num_years_to_forecast = 10L,
  num_years_of_data = 4L,
  num_physicians = 1000L,
  entrants_ratio = .05, # proportion of total physicians that enter
  spec_weights = c(.5, .2, .2, .1) # family medicine is 50% of total workforce, etc.
)
```

## (Fake) Data Set

```{r}
fake_data = tibble(
  phys_id = 1:params$num_physicians,
  spec_id = sample(specialties$spec_id, params$num_physicians, replace = T, prob = params$spec_weights), 
  age = as.integer(rnorm(params$num_physicians, 45, 12)) |> pmax(20L),
  rurality = runif(params$num_physicians),
  gender = sample(c("M","F"), params$num_physicians, T) # assume two genders for simplicity
) |>
  crossing(i = 1:params$num_years_of_data) |>
  mutate(age = age + i-1) |>
  mutate(fiscal = Vectorize(hsiaR::fiscal_add)(params$start_year, i-1)) |>
  select(-i) |>
  mutate(entered = F) |>
  mutate(retired = rurality + age + age^2 + if_else(gender == "M", 10, 0) + rnorm(1, 0, 500)) |> # linear combination of regressors plus 'normal' noise
  mutate(retired = retired > quantile(retired, .9)) # 90% don't retire
  
  
# remove all years after retirement
fake_data = fake_data |>
  anti_join(
    fake_data |>
      filter(retired) |>
      arrange(phys_id, fiscal) |>
      group_by(phys_id) |>
      slice_head(n=1),
    by=join_by(phys_id==phys_id, fiscal > fiscal)
)

# clean up columns and arrange
fake_data = fake_data |>
  mutate(gender = as_factor(gender)) |>
  mutate(fiscal_id = Vectorize(hsiaR::fiscal_diff)(params$start_year, fiscal)) |>
  select(phys_id, spec_id, fiscal_id, age, gender, rurality, entered, retired) |>
  arrange(phys_id, fiscal_id)
```

## (Fake) Data Set

```{r}
fake_data
```

## Data Visualization

```{r}
#| eval: false

gridExtra::grid.arrange(
  select(fake_data, phys_id, spec_id, age) |> 
    pivot_longer(cols = c(spec_id, age)) |>
    ggplot(aes(x=value, fill=name)) +
    facet_wrap(~name, scales='free') +
    geom_histogram() +
    ggthemes::theme_clean() +
    scale_fill_manual(values = viridis::viridis(4)[1:2]) + 
    guides(fill = 'none') + 
    labs(x=NULL, y=NULL),
  select(fake_data, phys_id, gender, retired) |> 
    mutate(across(2:3, as.factor)) |>
    pivot_longer(cols = c(gender, retired)) |>
    ggplot(aes(x=value, fill=name)) +
    facet_wrap(~name, scales='free') +
    geom_bar() +
    ggthemes::theme_clean() + 
    scale_fill_manual(values = viridis::viridis(4)[3:4]) + 
    guides(fill = 'none') +
    labs(x=NULL, y=NULL)
)
```

## Data Visualization

```{r}
#| echo: false

gridExtra::grid.arrange(
  select(fake_data, phys_id, spec_id, age) |> 
    pivot_longer(cols = c(spec_id, age)) |>
    ggplot(aes(x=value, fill=name)) +
    facet_wrap(~name, scales='free') +
    geom_histogram() +
    ggthemes::theme_clean() +
    scale_fill_manual(values = viridis::viridis(4)[1:2]) + 
    guides(fill = 'none') + 
    labs(x=NULL, y=NULL),
  
  select(fake_data, phys_id, gender, retired) |> 
    mutate(across(2:3, as.factor)) |>
    pivot_longer(cols = c(gender, retired)) |>
    ggplot(aes(x=value, fill=name)) +
    facet_wrap(~name, scales='free') +
    geom_bar() +
    ggthemes::theme_clean() + 
    scale_fill_manual(values = viridis::viridis(4)[3:4]) + 
    guides(fill = 'none') +
    labs(x=NULL, y=NULL)
)
```

## (Fake) Entrants Data Set

```{r}
fake_entrants = tibble(
  phys_id = 1:(params$num_physicians * params$entrants_ratio),
  spec_id = sample(specialties$spec_id, params$num_physicians * params$entrants_ratio, replace = T, params$spec_weights),
  age = as.integer(rnorm(params$num_physicians * params$entrants_ratio, 35, 12)) |> pmax(20L), # a bit younger than the previous pool
  rurality = runif(params$num_physicians * params$entrants_ratio),
  gender = as_factor(sample(c("M","F"), params$num_physicians * params$entrants_ratio, T)),
  entered = T,
  retired = F
)
```

## Add (Fake) Entrants to (Fake) Data

```{r}
fake_data = bind_rows(
  fake_data,
  fake_data |>
  select(spec_id, fiscal_id) |>
  arrange(spec_id, fiscal_id) |>
  unique() |>
  full_join(fake_entrants, by='spec_id', relationship = 'many-to-many') |>
  mutate(phys_id = -(fiscal_id + 1) * 1000 * phys_id)
)
```

## Nested Data

```{r}
#| code-line-numbers: "|2,5"

actuals = fake_data |>
  nest_by(spec_id, .key = "actuals")

entrants = fake_entrants |>
  nest_by(spec_id, .key = 'entrants')

actuals
```

## (Fake) Entrants Data Set

```{r}
entrants
```

## Four Functions

```{r}
#| code-line-numbers: "|2,9,16"

# returns a logistic object
calc_logit = function(df, equation) {
  df = df |> mutate(retired = as_factor(retired))
  logistic_reg(mode = 'classification', engine = 'glm') |>
    fit(as.formula(equation), data=df)
}

# returns a vector of predictions of retirement
calc_retirements = function(df, logit) {
  preds = predict(logit, df, type='prob')
  preds$u = runif(nrow(preds))
  return(preds$.pred_TRUE > preds$u)
}  

# returns a dataframe of entrants (with made up phys id numbers)
calc_entrants = function(df, h) {
  df |>
    mutate(phys_id = row_number() + (h * 1000)) |>
    mutate(entered = T) |>
    mutate(retired = F)
}

# simulates the progression of the workforce for one year
simulate_one_year = function(actuals_df, logit, entrants_df, h) {
  actuals_df = actuals_df |> filter(!retired)
  actuals_df$entered = F
  actuals_df$age = actuals_df$age + 1
  retired_idx = calc_retirements(actuals_df, logit)
  actuals_df$retired[retired_idx] = T
  entrants_df_with_id = calc_entrants(entrants_df, h)
  actuals_df = bind_rows(actuals_df, entrants_df_with_id)
  actuals_df$fiscal_id = params$num_years_of_data + h - 1
  return(actuals_df)
}
```

## Logistic Models

```{r}
models_all = tibble(
  model_id = 1:2,
  equation = c(
    "retired ~ age", 
    "retired ~ age + I(age^2) + gender + rurality + fiscal_id")
)
```

## Model Selection

::: fragment
```{r}
#| code-line-numbers: "1-3|4|5|6-8|10"
accuracy = models_all |>
  crossing(fake_data) |>
  nest_by(model_id, equation) |>
  mutate(logit = list(calc_logit(data, equation))) |>
  mutate(pred_retired = list(calc_retirements(data, logit))) |>
  mutate(retired = list(data$retired)) |>
  mutate(accurate = list(pred_retired == retired)) |>
  mutate(accuracy = mean(accurate))

accuracy
```
:::

<br>

-   **Model #2 (barely) beats Model #1!**

## Model Selection

```{r}
models = models_all[which.max(accuracy$accuracy), ]

models
```

## Logistic Regressions

```{r}
#| code-line-numbers: "13"

logits = actuals |>
  crossing(models) |>
  select(spec_id, model_id, equation, actuals) |>
  mutate(logit = list(calc_logit(first(actuals), equation))) |>
  select(spec_id, model_id, logit) |>
  rowwise(spec_id, model_id)

logits
```

## Simulation

```{r}
#| code-line-numbers: "|2|11|14,17|16"

forecasts = specialties |> select(spec_id)
forecasts$forecasts = actuals |>
  inner_join(logits) |>
  inner_join(entrants) |>
  
  apply(1, function(row) {
    actuals_init = row$actuals |> filter(fiscal_id == (params$num_years_of_data - 1))
    
    accumulate(1:params$num_years_to_forecast, function(actuals_df, h) {
      actuals_df = simulate_one_year(actuals_df, row$logit, row$entrants, h)
    }, .init = actuals_init) |>
      bind_rows() |>
      filter(fiscal_id >= params$num_years_of_data) |>
      arrange(phys_id, fiscal_id)
})
```

## Result

```{r}
result = bind_rows(
  actuals |> unnest(actuals) |> mutate(is_forecast = F),
  forecasts |> unnest(forecasts) |> mutate(is_forecast = T)
) |>
  arrange(spec_id, phys_id, fiscal_id) |>
  mutate(fiscal = Vectorize(hsiaR::fiscal_add)(params$start_year, fiscal_id)) |>
  select(-fiscal_id) |>
  inner_join(specialties) |>
  mutate(spec = fct(spec)) |>
  group_by(spec, fiscal, is_forecast) |>
  summarise(
    headcount = n(),
    retired = sum(retired),
    entered = sum(entered)
  )
```

## Result (Graphically)

```{r}
#| eval: false
result |>
  pivot_longer(cols=c(headcount, retired, entered)) |>
  mutate(name = fct(name)) |>
  mutate(fiscal = fct(fiscal)) |>
  ggplot(aes(x=fiscal, y=value, color=name, group=interaction(spec, name))) +
  facet_wrap(~spec, scales='free') +
  geom_line(data = ~filter(., !is_forecast)) +
  geom_line(data = ~filter(., is_forecast), linetype = "dashed") +
  geom_point() +
  ggthemes::theme_clean() +
  scale_color_viridis_d(option = "C") +
  theme(legend.position = 'bottom') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(color=NULL, x=NULL, y=NULL)
```

## Result (Graphically)

```{r}
#| echo: false
result |>
  pivot_longer(cols=c(headcount, retired, entered)) |>
  mutate(name = fct(name)) |>
  mutate(fiscal = fct(fiscal)) |>
  ggplot(aes(x=fiscal, y=value, color=name, group=interaction(spec, name))) +
  facet_wrap(~spec, scales='free') +
  geom_line(data = ~filter(., !is_forecast)) +
  geom_line(data = ~filter(., is_forecast), linetype = "dashed") +
  geom_point() +
  ggthemes::theme_clean() +
  scale_color_viridis_d(option = "C") +
  theme(legend.position = 'bottom') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(color=NULL, x=NULL, y=NULL)
```

## Result (Table)

```{r}
#| eval: false
result |>
  reactable(
    groupBy = "spec",
    highlight = T,
    fullWidth = F,
    columns = list(
      is_forecast = colDef(show = F),
      spec = colDef(minWidth = 250)
    ),
    defaultColDef = colDef(style = function(value, index) {
      if (result[[index, 'is_forecast']]) list(backgroundColor = 'lightyellow')
    })
  )
```

## Result (Table)

```{r}
#| echo: false
result |>
  reactable(
    groupBy = "spec",
    highlight = T,
    fullWidth = T,
    columns = list(
      is_forecast = colDef(show = F),
      spec = colDef(minWidth = 250)
    ),
    defaultColDef = colDef(style = function(value, index) {
      if (result[[index, 'is_forecast']]) list(backgroundColor = 'lightyellow')
    })
  )
```



```{r}

```

